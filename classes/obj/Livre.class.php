<?php
		//Generated by ObjectGenerator::generate() on 10/05/2019 12:52:19
class Livre {
	protected $id; /* int(11) */
	protected $titre; /* varchar(50) */
	protected $sousTitre; /* varchar(50) */
	protected $resume; /* varchar(255) */
	protected $image; /* varchar(25) */

	/* identifiant composite Etat */
	protected $etat; /* int(11) */
	/* liste des objets Etat */
	protected $oEtat; /* etat Object*/


	/* identifiant composite Edition */
	protected $edition; /* int(11) */
	/* liste des objets Edition */
	protected $oEdition; /* edition Object*/

	protected $mot_cle; /* varchar(255) */

	/* identifiant composite Langue */
	protected $langue; /* int(11) */
	/* liste des objets Langue */
	protected $oLangue; /* langue Object*/

	protected $empty = true; // permet de savoir si l'objet est vide

	public function __construct($id=0,$titre='',$sousTitre='',$resume='',$image='',$etat=0,$edition=0,$mot_cle='',$langue=0) {
		//Generated by ObjectGenerator::generateConstruct() on 10/05/2019 12:52:19
		$this->id = $id;
		$this->titre = $titre;
		$this->sousTitre = $sousTitre;
		$this->resume = $resume;
		$this->image = $image;
		$this->etat = $etat;
		$this->edition = $edition;
		$this->mot_cle = $mot_cle;
		$this->langue = $langue;

	}


	public function __clone() {
		//Generated by ObjectGenerator::generateClone() on 10/05/2019 12:52:19
		//Sur le clonage d'un objet on supprime l'identifiant
		$this->_description .= ' / Clone '.__CLASS__.' ID '.$this->_id;
		$this->_id = 0;
	}


	public function setId($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if (!$this->getEmpty()) {
			return;
		}
		$this->id = $nouvelleValeur;
	}



	public function setTitre($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		$this->titre = $nouvelleValeur;
	}



	public function setSousTitre($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		$this->sousTitre = $nouvelleValeur;
	}



	public function setResume($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		$this->resume = $nouvelleValeur;
	}



	public function setImage($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		$this->image = $nouvelleValeur;
	}



	public function setEtat($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if ($this->getEmpty() === false) {
			return;
		}
		/* un identifiant est toujours un entier non nul */
		if (!intval($nouvelleValeur) || $nouvelleValeur < 0) {
			return false;
		}
		/* la valeur est un entier <=> troncage des reels */
		$this->etat = floor($nouvelleValeur);
	}

	protected function setEtatObject() {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		if ($this->etat > 0) {
			$this->oEtat = FactoryEtat::getFromTableEtat($this->etat);
		}
	}



	public function setEdition($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if ($this->getEmpty() === false) {
			return;
		}
		/* un identifiant est toujours un entier non nul */
		if (!intval($nouvelleValeur) || $nouvelleValeur < 0) {
			return false;
		}
		/* la valeur est un entier <=> troncage des reels */
		$this->edition = floor($nouvelleValeur);
	}

	protected function setEditionObject() {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		if ($this->edition > 0) {
			$this->oEdition = FactoryEdition::getFromTableEdition($this->edition);
		}
	}



	public function setMot_cle($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		$this->mot_cle = $nouvelleValeur;
	}



	public function setLangue($nouvelleValeur) {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		/* La modification de l'identifiant DB est interdite SAUF SI l'objet est vide au depart */
		if ($this->getEmpty() === false) {
			return;
		}
		/* un identifiant est toujours un entier non nul */
		if (!intval($nouvelleValeur) || $nouvelleValeur < 0) {
			return false;
		}
		/* la valeur est un entier <=> troncage des reels */
		$this->langue = floor($nouvelleValeur);
	}

	protected function setLangueObject() {
		//Generated by ObjectGenerator::generateSet() on 10/05/2019 12:52:19
		if ($this->langue > 0) {
			$this->oLangue = FactoryLangue::getFromTableLangue($this->langue);
		}
	}




	public function getId() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->id;
	}



	public function getTitre() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->titre;
	}



	public function getSousTitre() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->sousTitre;
	}



	public function getResume() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->resume;
	}



	public function getImage() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->image;
	}



	public function getEtat() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->etat;
	}

	public function getEtatObject() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		if (empty($this->oEtat)) {
			$this->setEtatObject();
		}
		if ((empty($this->oEtat) || is_null($this->oEtat))&& $this->etat > 0) {
			$this->setEtatObject();
		}
		return $this->oEtat;
	}



	public function getEdition() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->edition;
	}

	public function getEditionObject() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		if (empty($this->oEdition)) {
			$this->setEditionObject();
		}
		if ((empty($this->oEdition) || is_null($this->oEdition))&& $this->edition > 0) {
			$this->setEditionObject();
		}
		return $this->oEdition;
	}



	public function getMot_cle() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->mot_cle;
	}



	public function getLangue() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		return $this->langue;
	}

	public function getLangueObject() {
		//Generated by ObjectGenerator::generateGet() on 10/05/2019 12:52:19
		if (empty($this->oLangue)) {
			$this->setLangueObject();
		}
		if ((empty($this->oLangue) || is_null($this->oLangue))&& $this->langue > 0) {
			$this->setLangueObject();
		}
		return $this->oLangue;
	}



	public function __toString() {
		//Generated by ObjectGenerator::generateToString() on 10/05/2019 12:52:19
		$chaine = 'Objet '.get_class($this).':<br/>';
		$chaine .= 'Le champ id vaut '.$this->getId().'<br/>';
		$chaine .= 'Le champ titre vaut '.$this->getTitre().'<br/>';
		$chaine .= 'Le champ sousTitre vaut '.$this->getSousTitre().'<br/>';
		$chaine .= 'Le champ resume vaut '.$this->getResume().'<br/>';
		$chaine .= 'Le champ image vaut '.$this->getImage().'<br/>';
		$chaine .= 'Le champ etat vaut '.$this->getEtat().'<br/>';
		$chaine .= 'Le champ edition vaut '.$this->getEdition().'<br/>';
		$chaine .= 'Le champ mot_cle vaut '.$this->getMot_cle().'<br/>';
		$chaine .= 'Le champ langue vaut '.$this->getLangue().'<br/>';
		return $chaine;
	}

	public function save() {
		//Generated by ObjectGenerator::generateSave() on 10/05/2019 12:52:19
		if ($this->getId() > 0) {
			/* un identifiant superieur a 0 implique un ancien objet => UPDATE */
			return$this->update();
		} else {
			$requete = 'INSERT INTO livre (id,titre,sousTitre,resume,image,etat,edition,mot_cle,langue)';
			$requete .= ' VALUES ';
			$requete .= '(';
				$requete .= 'titre,';
				$requete .= 'sousTitre,';
				$requete .= 'resume,';
				$requete .= 'image,';
				$requete .= 'etat,';
				$requete .= 'edition,';
				$requete .= 'mot_cle,';
				$requete .= 'langue,';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ')';
			return $requete;
		}
	}

	public function update() {
		//Generated by ObjectGenerator::generateUpdate() on 10/05/2019 12:52:19
		if ($this->getId() == 0 || $this->getId() == null) {
			/* un identifiant 0 ou null implique un nouvel objet => INSERT */
			return$this->save();
		} else {
			$requete = 'UPDATE livre SET ';
			$requete .= 'titre = \''.$this->getTitre().'\',';
			$requete .= 'sousTitre = \''.$this->getSousTitre().'\',';
			$requete .= 'resume = \''.$this->getResume().'\',';
			$requete .= 'image = \''.$this->getImage().'\',';
			$requete .= 'etat = '.$this->getEtat().',';
			$requete .= 'edition = '.$this->getEdition().',';
			$requete .= 'mot_cle = \''.$this->getMot_cle().'\',';
			$requete .= 'langue = '.$this->getLangue().',';
			$requete = substr($requete,0,strlen($requete)-1);
			$requete .= ' WHERE id = '.$this->getId();
			return $requete;
		}
	}

	public function delete() {
		//Generated by ObjectGenerator::generateDelete() on 10/05/2019 12:52:19
		if ($this->getId() == 0 || $this->getId() == null) {
			throw new Exception(get_class($this).": aucun identifiant donn&eacute; pour supprimer");
		} else {
			return 'DELETE FROM livre WHERE id = '.$this->getId();
		}
	}

	public function getParent() {
		//Generated by ObjectGenerator::generateGetParent() on 10/05/2019 12:52:19
		return ('parent::__construct($id,$titre,$sousTitre,$resume,$image,$etat,$edition,$mot_cle,$langue);');
	}

	public function getAttributes() {
		//Generated by ObjectGenerator::generateGetAttributes() on 10/05/2019 12:52:19
		$result = array();
		$result2 = array();
		$reflection = new ReflectionClass($this);
		$result = $reflection->getdefaultProperties();
		$result = array_keys($result);
		foreach ($result AS $data) {
			$result2[] = substr($data,1);
		}
		return $result2;
	}

	public function compareTo($object) {
		//Generated by ObjectGenerator::generateCompareTo() on 10/05/2019 12:52:19
		$data = array();
		if ($object instanceof Livre) {
			if ($this->id != $object->getId()) {
				$data['id'] = $object->getId();
			}
			if ($this->titre != $object->getTitre()) {
				$data['titre'] = $object->getTitre();
			}
			if ($this->sousTitre != $object->getSousTitre()) {
				$data['sousTitre'] = $object->getSousTitre();
			}
			if ($this->resume != $object->getResume()) {
				$data['resume'] = $object->getResume();
			}
			if ($this->image != $object->getImage()) {
				$data['image'] = $object->getImage();
			}
			if ($this->etat != $object->getEtat()) {
				$data['etat'] = $object->getEtat();
			}
			if ($this->edition != $object->getEdition()) {
				$data['edition'] = $object->getEdition();
			}
			if ($this->mot_cle != $object->getMot_cle()) {
				$data['mot_cle'] = $object->getMot_cle();
			}
			if ($this->langue != $object->getLangue()) {
				$data['langue'] = $object->getLangue();
			}
		}
		return $data;
	}

	public function encodeDecodeJSON($json_str='') {
		//Generated by ObjectGenerator::generateEncodeDecodeJSON() on 10/05/2019 12:52:19
		if ($json_str == '') {
			// Objet standard a remplir
			$json= new stdClass();
			foreach ($this as $key => $value) {
				if (substr($key,0,1) == '_') {
					$key = substr($key,1);
					//on evite de faire sortir les objet fonctionnels
					if (strtolower(substr($key,0,1)) != 'o') {
						$json->$key = $value;
					}
				}
				$json->$key = $value;
			}
			return json_encode($json);
		} else {
			/* decodage et hydratation des datas JSON */
			$json = json_decode($json_str, 1);
			foreach ($json as $key => $value) {
				$method = 'set'.ucfirst($key);
				//Si la methode existe alors on l'utilise
				if (method_exists($this, $method)) {
					$this->$method($value);
				}
			}
		}
	}

	public function getClass() {
		//Generated by ObjectGenerator::generateGetClass() on 10/05/2019 12:52:19
		return get_class($this);
	}

	public function getEmpty() {
		//Generated by ObjectGenerator::generateIsEmpty() on 10/05/2019 12:52:19
		return $this->empty;
	}

	public function setEmpty($nouvelleValeurEmpty) {
		//Generated by ObjectGenerator::generateIsEmpty() on 10/05/2019 12:52:19
		if (is_bool($nouvelleValeurEmpty)) {
			$this->empty = $nouvelleValeurEmpty;
		}
	}

	public function affiche() {
		//Generated by ObjectGenerator::generateAffiche() on 10/05/2019 12:52:19
		/* Chargement de Smarty */
		require_once(_SMARTY_LOAD_);
		$smarty->assign('livre',$this);
		$smarty->assign('aListeMethodes',get_class_methods($this));
		$smarty->assign('urlVersMiniature',_URL_MINIATURES_.$this->getNom().'.jpg');
		/* Appel de l'affichage pour la classe en cour d'utilisation */
		$smarty->display(_TEMPLATES_BASE_.'classes/Livre.tpl');
	}

}
?>